"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[937],{3966:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"docs/developer-resources/plugin-development","title":"Plugin Development Guide","description":"This guide walks you through creating a complete plugin for the Talawa platform, using the Plugin Map plugin as a reference example.","source":"@site/docs/docs/developer-resources/plugin-development.md","sourceDirName":"docs/developer-resources","slug":"/developer-resources/plugin-development","permalink":"/docs/developer-resources/plugin-development","draft":false,"unlisted":false,"editUrl":"https://github.com/PalisadoesFoundation/talawa-plugin/edit/develop/docs/docs/docs/developer-resources/plugin-development.md","tags":[],"version":"current","frontMatter":{"id":"plugin-development","title":"Plugin Development Guide","slug":"/developer-resources/plugin-development"},"sidebar":"tutorialSidebar","previous":{"title":"Extension Points Reference","permalink":"/docs/developer-resources/extension-points"}}');var r=t(6070),i=t(7648);const l={id:"plugin-development",title:"Plugin Development Guide",slug:"/developer-resources/plugin-development"},s="Plugin Development Guide",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Plugin Structure",id:"plugin-structure",level:2},{value:"Step 1: Create Plugin Directory",id:"step-1-create-plugin-directory",level:2},{value:"Step 2: API Plugin Development",id:"step-2-api-plugin-development",level:2},{value:"2.1 Create API Manifest",id:"21-create-api-manifest",level:3},{value:"2.2 Create Database Schema",id:"22-create-database-schema",level:3},{value:"2.3 Create GraphQL Types",id:"23-create-graphql-types",level:3},{value:"2.4 Create GraphQL Inputs",id:"24-create-graphql-inputs",level:3},{value:"2.5 Create GraphQL Queries",id:"25-create-graphql-queries",level:3},{value:"2.6 Create GraphQL Mutations",id:"26-create-graphql-mutations",level:3},{value:"2.7 Create Main Entry Point",id:"27-create-main-entry-point",level:3},{value:"Step 3: Admin Plugin Development",id:"step-3-admin-plugin-development",level:2},{value:"3.1 Create Admin Manifest",id:"31-create-admin-manifest",level:3},{value:"3.2 Create React Components",id:"32-create-react-components",level:3},{value:"3.3 Create Main Entry Point",id:"33-create-main-entry-point",level:3},{value:"Step 4: Testing Your Plugin",id:"step-4-testing-your-plugin",level:2},{value:"4.1 Start the Development Servers",id:"41-start-the-development-servers",level:3},{value:"4.2 Test GraphQL Operations",id:"42-test-graphql-operations",level:3},{value:"4.3 Access Your Plugin",id:"43-access-your-plugin",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Plugin ID Naming",id:"1-plugin-id-naming",level:3},{value:"2. GraphQL Operations",id:"2-graphql-operations",level:3},{value:"3. Database Design",id:"3-database-design",level:3},{value:"4. UI Components",id:"4-ui-components",level:3},{value:"5. Error Handling",id:"5-error-handling",level:3},{value:"6. Type Safety",id:"6-type-safety",level:3},{value:"Next Steps",id:"next-steps",level:2}];function p(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"plugin-development-guide",children:"Plugin Development Guide"})}),"\n",(0,r.jsx)(e.p,{children:"This guide walks you through creating a complete plugin for the Talawa platform, using the Plugin Map plugin as a reference example."}),"\n",(0,r.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(e.p,{children:"A Talawa plugin consists of two main parts:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"API Plugin"}),": Backend functionality (GraphQL, database, hooks)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Admin Plugin"}),": Frontend components (pages, navigation, UI)"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"plugin-structure",children:"Plugin Structure"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"my-plugin/\n\u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 manifest.json          # API plugin manifest\n\u2502   \u251c\u2500\u2500 index.ts              # Main entry point\n\u2502   \u251c\u2500\u2500 database/\n\u2502   \u2502   \u2514\u2500\u2500 tables.ts         # Database schema\n\u2502   \u2514\u2500\u2500 graphql/\n\u2502       \u251c\u2500\u2500 queries.ts         # GraphQL queries\n\u2502       \u251c\u2500\u2500 mutations.ts       # GraphQL mutations\n\u2502       \u251c\u2500\u2500 types.ts           # GraphQL types\n\u2502       \u2514\u2500\u2500 inputs.ts          # GraphQL input types\n\u2514\u2500\u2500 admin/\n    \u251c\u2500\u2500 manifest.json          # Admin plugin manifest\n    \u251c\u2500\u2500 index.tsx             # Main entry point\n    \u2514\u2500\u2500 pages/\n        \u2514\u2500\u2500 MyComponent.tsx    # React components\n"})}),"\n",(0,r.jsx)(e.h2,{id:"step-1-create-plugin-directory",children:"Step 1: Create Plugin Directory"}),"\n",(0,r.jsx)(e.p,{children:"First, create your plugin directory in the appropriate locations:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# API Plugin\nmkdir -p talawa-api-fork/src/plugin/available/my_plugin\n\n# Admin Plugin\nmkdir -p talawa-admin-fork/src/plugin/available/my_plugin\n"})}),"\n",(0,r.jsx)(e.h2,{id:"step-2-api-plugin-development",children:"Step 2: API Plugin Development"}),"\n",(0,r.jsx)(e.h3,{id:"21-create-api-manifest",children:"2.1 Create API Manifest"}),"\n",(0,r.jsxs)(e.p,{children:["Create ",(0,r.jsx)(e.code,{children:"talawa-api-fork/src/plugin/available/my_plugin/manifest.json"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'{\n  "name": "My Plugin",\n  "pluginId": "my_plugin",\n  "version": "1.0.0",\n  "description": "A sample plugin demonstrating plugin development",\n  "author": "Your Name",\n  "main": "index.ts",\n  "extensionPoints": {\n    "graphql": [\n      {\n        "type": "query",\n        "name": "myPluginQueries",\n        "file": "graphql/queries.ts",\n        "builderDefinition": "registerMyPluginQueries",\n        "description": "Register all My Plugin query fields"\n      },\n      {\n        "type": "mutation",\n        "name": "myPluginMutations",\n        "file": "graphql/mutations.ts",\n        "builderDefinition": "registerMyPluginMutations",\n        "description": "Register all My Plugin mutation fields"\n      }\n    ],\n    "database": [\n      {\n        "type": "table",\n        "name": "myPluginTable",\n        "file": "database/tables.ts",\n        "description": "My plugin data table"\n      }\n    ],\n    "hooks": [\n      {\n        "type": "post",\n        "event": "plugin:activated",\n        "handler": "onPluginActivated",\n        "description": "Handle plugin activation events"\n      }\n    ]\n  }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"22-create-database-schema",children:"2.2 Create Database Schema"}),"\n",(0,r.jsxs)(e.p,{children:["Create ",(0,r.jsx)(e.code,{children:"talawa-api-fork/src/plugin/available/my_plugin/database/tables.ts"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'import { pgTable, text, timestamp, integer, uuid } from "drizzle-orm/pg-core";\n\nexport const myPluginTable = pgTable("my_plugin_data", {\n  id: uuid("id").primaryKey().defaultRandom(),\n  name: text("name").notNull(),\n  description: text("description"),\n  createdAt: timestamp("created_at").defaultNow(),\n  updatedAt: timestamp("updated_at").defaultNow(),\n});\n'})}),"\n",(0,r.jsx)(e.h3,{id:"23-create-graphql-types",children:"2.3 Create GraphQL Types"}),"\n",(0,r.jsxs)(e.p,{children:["Create ",(0,r.jsx)(e.code,{children:"talawa-api-fork/src/plugin/available/my_plugin/graphql/types.ts"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'import { builder } from "~/src/graphql/builder";\n\n// MyPluginData type\nexport const MyPluginDataRef = builder.objectRef<{\n  id: string;\n  name: string;\n  description: string | null;\n  createdAt: Date | null;\n  updatedAt: Date | null;\n}>("MyPluginData");\n\nMyPluginDataRef.implement({\n  fields: (t) => ({\n    id: t.exposeID("id"),\n    name: t.exposeString("name"),\n    description: t.exposeString("description", { nullable: true }),\n    createdAt: t.expose("createdAt", { type: "DateTime" }),\n    updatedAt: t.expose("updatedAt", { type: "DateTime" }),\n  }),\n});\n\n// MyPluginDataList type\nexport const MyPluginDataListRef = builder.objectRef<{\n  data: Array<{\n    id: string;\n    name: string;\n    description: string | null;\n    createdAt: Date | null;\n    updatedAt: Date | null;\n  }>;\n  totalCount: number;\n}>("MyPluginDataList");\n\nMyPluginDataListRef.implement({\n  fields: (t) => ({\n    data: t.field({\n      type: t.listRef(MyPluginDataRef),\n      resolve: (parent) => parent.data,\n    }),\n    totalCount: t.exposeInt("totalCount"),\n  }),\n});\n'})}),"\n",(0,r.jsx)(e.h3,{id:"24-create-graphql-inputs",children:"2.4 Create GraphQL Inputs"}),"\n",(0,r.jsxs)(e.p,{children:["Create ",(0,r.jsx)(e.code,{children:"talawa-api-fork/src/plugin/available/my_plugin/graphql/inputs.ts"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'import { z } from "zod";\nimport { builder } from "~/src/graphql/builder";\n\n// Create MyPluginData Input\nexport const createMyPluginDataInputSchema = z.object({\n  name: z.string(),\n  description: z.string().optional(),\n});\n\nexport const CreateMyPluginDataInput = builder\n  .inputRef<\n    z.infer<typeof createMyPluginDataInputSchema>\n  >("CreateMyPluginDataInput")\n  .implement({\n    description: "Input for creating a new my plugin data entry",\n    fields: (t) => ({\n      name: t.string({ required: true }),\n      description: t.string({ required: false }),\n    }),\n  });\n'})}),"\n",(0,r.jsx)(e.h3,{id:"25-create-graphql-queries",children:"2.5 Create GraphQL Queries"}),"\n",(0,r.jsxs)(e.p,{children:["Create ",(0,r.jsx)(e.code,{children:"talawa-api-fork/src/plugin/available/my_plugin/graphql/queries.ts"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'import { desc } from "drizzle-orm";\nimport { builder } from "~/src/graphql/builder";\nimport type { GraphQLContext } from "~/src/graphql/context";\nimport { TalawaGraphQLError } from "~/src/utilities/TalawaGraphQLError";\nimport { myPluginTable } from "../database/tables";\nimport { MyPluginDataListRef } from "./types";\n\n// Get all my plugin data\nexport async function getMyPluginDataResolver(\n  _parent: unknown,\n  _args: Record<string, unknown>,\n  ctx: GraphQLContext,\n) {\n  if (!ctx.currentClient.isAuthenticated) {\n    throw new TalawaGraphQLError({\n      extensions: { code: "unauthenticated" },\n    });\n  }\n\n  try {\n    const data = await ctx.drizzleClient\n      .select()\n      .from(myPluginTable)\n      .orderBy(desc(myPluginTable.createdAt));\n\n    return {\n      data,\n      totalCount: data.length,\n    };\n  } catch (error) {\n    ctx.log?.error("Error getting my plugin data:", error);\n    throw new TalawaGraphQLError({\n      extensions: { code: "unexpected" },\n    });\n  }\n}\n\n// Register queries with the builder\nexport function registerMyPluginQueries(builderInstance: typeof builder): void {\n  builderInstance.queryField("getMyPluginData", (t) =>\n    t.field({\n      type: MyPluginDataListRef,\n      description: "Get all my plugin data entries",\n      resolve: getMyPluginDataResolver,\n    }),\n  );\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"26-create-graphql-mutations",children:"2.6 Create GraphQL Mutations"}),"\n",(0,r.jsxs)(e.p,{children:["Create ",(0,r.jsx)(e.code,{children:"talawa-api-fork/src/plugin/available/my_plugin/graphql/mutations.ts"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'import { builder } from "~/src/graphql/builder";\nimport type { GraphQLContext } from "~/src/graphql/context";\nimport { TalawaGraphQLError } from "~/src/utilities/TalawaGraphQLError";\nimport { myPluginTable } from "../database/tables";\nimport { MyPluginDataRef } from "./types";\nimport { createMyPluginDataInputSchema } from "./inputs";\n\n// Create my plugin data\nexport async function createMyPluginDataResolver(\n  _parent: unknown,\n  args: {\n    input: {\n      name: string;\n      description?: string;\n    };\n  },\n  ctx: GraphQLContext,\n) {\n  if (!ctx.currentClient.isAuthenticated) {\n    throw new TalawaGraphQLError({\n      extensions: { code: "unauthenticated" },\n    });\n  }\n\n  const {\n    success,\n    data: parsedInput,\n    error,\n  } = createMyPluginDataInputSchema.safeParse(args.input);\n\n  if (!success) {\n    ctx.log?.error("Invalid arguments for createMyPluginData:", error);\n    throw new TalawaGraphQLError({\n      extensions: { code: "unexpected" },\n    });\n  }\n\n  try {\n    const [newData] = await ctx.drizzleClient\n      .insert(myPluginTable)\n      .values({\n        name: parsedInput.name,\n        description: parsedInput.description,\n      })\n      .returning();\n\n    return newData;\n  } catch (error) {\n    ctx.log?.error("Error creating my plugin data:", error);\n    throw new TalawaGraphQLError({\n      extensions: { code: "unexpected" },\n    });\n  }\n}\n\n// Register mutations with the builder\nexport function registerMyPluginMutations(\n  builderInstance: typeof builder,\n): void {\n  builderInstance.mutationField("createMyPluginData", (t) =>\n    t.field({\n      type: MyPluginDataRef,\n      args: {\n        input: t.arg({\n          type: CreateMyPluginDataInput,\n          required: true,\n        }),\n      },\n      description: "Create a new my plugin data entry",\n      resolve: createMyPluginDataResolver,\n    }),\n  );\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"27-create-main-entry-point",children:"2.7 Create Main Entry Point"}),"\n",(0,r.jsxs)(e.p,{children:["Create ",(0,r.jsx)(e.code,{children:"talawa-api-fork/src/plugin/available/my_plugin/index.ts"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'import type { IPluginContext } from "~/src/plugin/types";\n\n// Export all GraphQL components\nexport * from "./graphql/queries";\nexport * from "./graphql/mutations";\nexport * from "./graphql/types";\nexport * from "./graphql/inputs";\n\n// Lifecycle hooks\nexport async function onLoad(context: IPluginContext): Promise<void> {\n  if (context.logger?.info) {\n    context.logger.info("My Plugin loaded successfully");\n  }\n\n  // Initialize plugin table if it doesn\'t exist\n  try {\n    const { myPluginTable } = await import("./database/tables");\n\n    if (\n      context.db &&\n      typeof context.db === "object" &&\n      "select" in context.db\n    ) {\n      const db = context.db as any;\n      await db.select().from(myPluginTable).limit(1);\n    }\n\n    if (context.logger?.info) {\n      context.logger.info("My Plugin table verified");\n    }\n  } catch (error) {\n    if (context.logger?.warn) {\n      context.logger.warn("Failed to verify plugin table:", error);\n    }\n  }\n}\n\nexport async function onActivate(context: IPluginContext): Promise<void> {\n  if (context.logger?.info) {\n    context.logger.info("My Plugin activated");\n  }\n\n  // Register GraphQL schema extensions\n  if (context.graphql) {\n    try {\n      const { registerMyPluginQueries } = await import("./graphql/queries");\n      const { registerMyPluginMutations } = await import("./graphql/mutations");\n\n      registerMyPluginQueries(context.graphql as any);\n      registerMyPluginMutations(context.graphql as any);\n\n      if (context.logger?.info) {\n        context.logger.info(\n          "GraphQL schema extensions registered for My Plugin",\n        );\n      }\n    } catch (error) {\n      if (context.logger?.error) {\n        context.logger.error("Failed to register GraphQL extensions:", error);\n      }\n    }\n  }\n}\n\nexport async function onDeactivate(context: IPluginContext): Promise<void> {\n  if (context.logger?.info) {\n    context.logger.info("My Plugin deactivated");\n  }\n}\n\nexport async function onUnload(context: IPluginContext): Promise<void> {\n  if (context.logger?.info) {\n    context.logger.info("My Plugin unloaded");\n  }\n}\n\n// Hook handlers\nexport async function onPluginActivated(\n  context: IPluginContext,\n): Promise<void> {\n  if (context.logger?.info) {\n    context.logger.info("My Plugin activated via hook");\n  }\n}\n\n// Plugin information\nexport function getPluginInfo() {\n  return {\n    name: "My Plugin",\n    version: "1.0.0",\n    description: "A sample plugin demonstrating plugin development",\n    author: "Your Name",\n    dependencies: [],\n    graphqlOperations: ["getMyPluginData", "createMyPluginData"],\n  };\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"step-3-admin-plugin-development",children:"Step 3: Admin Plugin Development"}),"\n",(0,r.jsx)(e.h3,{id:"31-create-admin-manifest",children:"3.1 Create Admin Manifest"}),"\n",(0,r.jsxs)(e.p,{children:["Create ",(0,r.jsx)(e.code,{children:"talawa-admin-fork/src/plugin/available/my_plugin/manifest.json"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'{\n  "name": "My Plugin",\n  "pluginId": "my_plugin",\n  "version": "1.0.0",\n  "description": "A sample plugin demonstrating plugin development",\n  "author": "Your Name",\n  "main": "index.tsx",\n  "icon": "/src/assets/svgs/plugins.svg",\n  "extensionPoints": {\n    "RA1": [\n      {\n        "path": "/admin/my-plugin/dashboard",\n        "component": "MyPluginDashboard"\n      }\n    ],\n    "DA1": [\n      {\n        "label": "My Plugin",\n        "icon": "/src/assets/svgs/plugins.svg",\n        "path": "/admin/my-plugin/dashboard",\n        "order": 1\n      }\n    ]\n  }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"32-create-react-components",children:"3.2 Create React Components"}),"\n",(0,r.jsxs)(e.p,{children:["Create ",(0,r.jsx)(e.code,{children:"talawa-admin-fork/src/plugin/available/my_plugin/pages/MyPluginDashboard.tsx"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"import React, { useState } from 'react';\nimport { Card, Typography, Row, Col, Button, message, Space, Table, Form, Input } from 'antd';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { gql } from 'graphql-tag';\n\nconst { Title, Paragraph } = Typography;\n\n// GraphQL queries and mutations\nconst GET_MY_PLUGIN_DATA = gql`\n  query GetMyPluginData {\n    getMyPluginData {\n      data {\n        id\n        name\n        description\n        createdAt\n        updatedAt\n      }\n      totalCount\n    }\n  }\n`;\n\nconst CREATE_MY_PLUGIN_DATA = gql`\n  mutation CreateMyPluginData($input: CreateMyPluginDataInput!) {\n    createMyPluginData(input: $input) {\n      id\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nconst MyPluginDashboard: React.FC = () => {\n  const [form] = Form.useForm();\n  const [createData] = useMutation(CREATE_MY_PLUGIN_DATA);\n\n  const { data, loading, refetch } = useQuery(GET_MY_PLUGIN_DATA, {\n    fetchPolicy: 'network-only',\n  });\n\n  const handleCreate = async (values: { name: string; description?: string }) => {\n    try {\n      await createData({\n        variables: {\n          input: values,\n        },\n      });\n\n      message.success('Data created successfully');\n      form.resetFields();\n      refetch();\n    } catch (error) {\n      console.error('Error creating data:', error);\n      message.error('Failed to create data');\n    }\n  };\n\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: 'Description',\n      dataIndex: 'description',\n      key: 'description',\n    },\n    {\n      title: 'Created At',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      render: (createdAt: string) => new Date(createdAt).toLocaleString(),\n    },\n  ];\n\n  return (\n    <div style={{ padding: '24px' }}>\n      <Title level={2}>My Plugin Dashboard</Title>\n      <Paragraph>\n        This is a sample plugin dashboard demonstrating plugin development.\n      </Paragraph>\n\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Card title=\"Create New Data\" style={{ marginBottom: '16px' }}>\n            <Form form={form} onFinish={handleCreate} layout=\"vertical\">\n              <Form.Item\n                name=\"name\"\n                label=\"Name\"\n                rules={[{ required: true, message: 'Please enter a name' }]}\n              >\n                <Input placeholder=\"Enter name\" />\n              </Form.Item>\n\n              <Form.Item name=\"description\" label=\"Description\">\n                <Input.TextArea placeholder=\"Enter description\" />\n              </Form.Item>\n\n              <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Create Data\n                </Button>\n              </Form.Item>\n            </Form>\n          </Card>\n        </Col>\n\n        <Col span={24}>\n          <Card title=\"Data List\">\n            <Table\n              columns={columns}\n              dataSource={data?.getMyPluginData?.data || []}\n              loading={loading}\n              rowKey=\"id\"\n              pagination={{\n                pageSize: 10,\n                showSizeChanger: true,\n                showQuickJumper: true,\n              }}\n            />\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default MyPluginDashboard;\n"})}),"\n",(0,r.jsx)(e.h3,{id:"33-create-main-entry-point",children:"3.3 Create Main Entry Point"}),"\n",(0,r.jsxs)(e.p,{children:["Create ",(0,r.jsx)(e.code,{children:"talawa-admin-fork/src/plugin/available/my_plugin/index.tsx"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"import React from 'react';\nimport MyPluginDashboard from './pages/MyPluginDashboard';\n\n// Export all components\nexport { MyPluginDashboard };\n\n// Default export for the main component\nconst MyPlugin: React.FC = () => {\n  return <MyPluginDashboard />;\n};\n\nexport default MyPlugin;\n"})}),"\n",(0,r.jsx)(e.h2,{id:"step-4-testing-your-plugin",children:"Step 4: Testing Your Plugin"}),"\n",(0,r.jsx)(e.h3,{id:"41-start-the-development-servers",children:"4.1 Start the Development Servers"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Start API server\ncd talawa-api-fork\nnpm run dev\n\n# Start Admin server\ncd talawa-admin-fork\nnpm run dev\n"})}),"\n",(0,r.jsx)(e.h3,{id:"42-test-graphql-operations",children:"4.2 Test GraphQL Operations"}),"\n",(0,r.jsx)(e.p,{children:"You can test your GraphQL operations using the GraphQL Playground or any GraphQL client:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-graphql",children:"# Query\nquery GetMyPluginData {\n  getMyPluginData {\n    data {\n      id\n      name\n      description\n      createdAt\n      updatedAt\n    }\n    totalCount\n  }\n}\n\n# Mutation\nmutation CreateMyPluginData($input: CreateMyPluginDataInput!) {\n  createMyPluginData(input: $input) {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"43-access-your-plugin",children:"4.3 Access Your Plugin"}),"\n",(0,r.jsx)(e.p,{children:"Navigate to your plugin in the admin panel:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Global Admin"}),": ",(0,r.jsx)(e.code,{children:"/admin/my-plugin/dashboard"})]}),"\n",(0,r.jsx)(e.li,{children:'Check the drawer menu for "My Plugin" entry'}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(e.h3,{id:"1-plugin-id-naming",children:"1. Plugin ID Naming"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Use snake_case for plugin IDs"}),"\n",(0,r.jsx)(e.li,{children:"Make them descriptive and unique"}),"\n",(0,r.jsx)(e.li,{children:"Avoid special characters except underscores"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"2-graphql-operations",children:"2. GraphQL Operations"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Prefix all operations with your plugin ID"}),"\n",(0,r.jsx)(e.li,{children:"Use descriptive names for queries and mutations"}),"\n",(0,r.jsx)(e.li,{children:"Implement proper error handling"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"3-database-design",children:"3. Database Design"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Use descriptive table names"}),"\n",(0,r.jsx)(e.li,{children:"Include proper indexes for performance"}),"\n",(0,r.jsx)(e.li,{children:"Follow the existing schema patterns"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"4-ui-components",children:"4. UI Components"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Follow the existing design patterns"}),"\n",(0,r.jsx)(e.li,{children:"Use Ant Design components consistently"}),"\n",(0,r.jsx)(e.li,{children:"Implement proper loading and error states"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"5-error-handling",children:"5. Error Handling"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Always handle GraphQL errors gracefully"}),"\n",(0,r.jsx)(e.li,{children:"Log errors appropriately"}),"\n",(0,r.jsx)(e.li,{children:"Provide user-friendly error messages"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"6-type-safety",children:"6. Type Safety"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Use TypeScript for all components"}),"\n",(0,r.jsx)(e.li,{children:"Define proper interfaces for all data structures"}),"\n",(0,r.jsx)(e.li,{children:"Leverage GraphQL types for type safety"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Add More Features"}),": Extend your plugin with additional functionality"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Add Tests"}),": Create unit and integration tests"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Add Documentation"}),": Document your plugin's features and usage"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Optimize Performance"}),": Implement caching and optimization strategies"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Add Configuration"}),": Make your plugin configurable through settings"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Package Your Plugin"}),": Use the ",(0,r.jsx)(e.a,{href:"/docs/developer-resources/scripts",children:"Plugin Scripts"})," to create distributable zip files"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"This guide provides a solid foundation for plugin development. Refer to the Plugin Map plugin for a complete working example of all these concepts in action."})]})}function c(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(p,{...n})}):p(n)}},7648:(n,e,t)=>{t.d(e,{R:()=>l,x:()=>s});var a=t(758);const r={},i=a.createContext(r);function l(n){const e=a.useContext(i);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:l(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);